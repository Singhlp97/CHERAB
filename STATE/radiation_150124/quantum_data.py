import numpy as np
import pickle
import matplotlib.pyplot as plt

############################################################################################

"""
TODO mmm:
- automatised reading from AMJ database for excited states
- user-selectable n_quantum in FractionExcitedHydrogenPlasma
"""

############################################################################################

def BoltzmannFactor(E_eV, T_eV):
  return np.exp(- np.abs(E_eV + 13.6) / T_eV)  

def E_eV(n_quantum):
  return -13.6 / n_quantum**2 # [eV]

def g(n_quantum):
  return 2 * n_quantum**2 # degeneracy

############################################################################################
############################################################################################
############################################################################################

def FractionExcitedHydrogenGas(n_quantum = None, T_eV = None):

  # [-] principal quantum numbers
  ns = np.arange(50) + 1

  # partition function
  Z = np.zeros(T_eV.shape)

  for j in range(ns.shape[0]):
    Z += BoltzmannFactor(E_eV(ns[j]),T_eV) * g(ns[j])

  return g(n_quantum) * BoltzmannFactor(E_eV(n_quantum),T_eV) / Z

############################################################################################
############################################################################################
############################################################################################

def FractionExcitedHydrogenPlasma(n_m3 = None, T_eV = None):

  raise ValueError('FractionExcitedHydrogenPlasma is WRONG: Amjuel 01 population coefficient in LINEAR scale! Use homemade_distributions.py script...')

  n_amj = n_m3 * 1E-06 * 1E-08 # rescaling needed by Amjuel

  alpha21, alpha01 = InitialiseCoefficients()

  lnf21 = np.zeros(n_m3.shape)
  lnf01 = np.zeros(n_m3.shape)

  if lnf21.shape[1] > 1:

      for i in range(lnf21.shape[0]):
          for j in range(lnf21.shape[1]):
              for n in range(alpha21.shape[0]):
                  for m in range(alpha21.shape[1]):
                      a21 = alpha21[n,m]
                      a01 = alpha01[n,m]
                      if n_amj[i,j] > 0 and T_eV[i,j] > 0:
                        lnf21[i,j] += a21 * np.log(n_amj[i,j])**m * np.log(T_eV[i,j])**n
                        lnf01[i,j] += a01 * np.log(n_amj[i,j])**m * np.log(T_eV[i,j])**n
                      else:
                        lnf21[i,j] += 0
                        lnf01[i,j] += 0

  else:

      for i in range(lnf21.shape[0]):
          for n in range(alpha21.shape[0]):
              for m in range(alpha21.shape[1]):
                  a21 = alpha21[n,m]
                  a01 = alpha01[n,m]
                  if n_amj[i] > 0 and T_eV[i] > 0:
                    lnf21[i] += a21 * np.log(n_amj[i])**m * np.log(T_eV[i])**n
                    lnf01[i] += a01 * np.log(n_amj[i])**m * np.log(T_eV[i])**n
                  else:
                    lnf21[i] += 0
                    lnf01[i] += 0

  f21 = np.exp(lnf21)
  f01 = np.exp(lnf01)
  fexct = f21 / f01

  # pickle.dump(lnf21, open("./lnf21.pickle", "wb"))
  # pickle.dump(lnf01, open("./lnf01.pickle", "wb"))

  return fexct

############################################################################################
############################################################################################
############################################################################################

def InitialiseCoefficients():

    # Database: Amjuel - http://eirene.de/amjuel.pdf
    # Group: H.12
    # Reactions: 2.1.5a (alpha31), 2.1.5b (alpha21), 2.1.5tot (alpha01)
    # Comments:
    # - from collisional-radiative (CR) equilibrium => a function of ne and Te only
    # - data taken by hand: no python automatised function at the minute!

    # alpha31 = [[-30.828776844720000,   0.974098242883400,   0.026934475644270,  -0.009004934091051, 0.001222843687947,  -0.000052108040497,  -0.000002739765256,  0.000000292709798 -0.000000006646460],
    #           [11.870302652720000,   0.019683380906480,  -0.024955047650880,   0.011231308550300, -0.002651909936461,   0.000353470914725,  -0.000026324507154,   0.000000998776232 -0.000000015014213],
    #           [-5.889482037865000,  -0.008737684945730,   0.009951688266911,  -0.005241271640755, 0.001372483328336,  -0.000191727509030,   0.000014416274710,  -0.000000548172052  0.000000008264010],
    #            [2.017399399792000,  -0.010146099250090,   0.010400818592100,  -0.003478025606446, 0.000557277409538,  -0.000048487842318,   0.000002416915703,  -0.000000066584573 0.000000000821582],
    #           [-0.530336030283900,   0.003297808176838,  -0.002712205422397,   0.000845452620831, -0.000136216812754,   0.000013061461513,  -0.000000777229053,   0.000000026552248 -0.000000000396898],
    #            [0.108045104795100,   0.000967329080612,  -0.001096708705743,   0.000387225819927, -0.000063539713434,   0.000005417022323,  -0.000000247024598,   0.000000005722045 -0.000000000054436],
    #           [-0.015550104667620,  -0.000516716828667,   0.000463791119048,  -0.000138089337471, 0.000018494290289,  -0.000001166761556,   0.000000029551243,   0.000000000031844 -0.000000000008216],
    #            [0.001327158680898,   0.000073894737034,  -0.000057975558624,   0.000014403416992, -0.000001290902554,  -0.000000004889964,   0.000000007390397,  -0.000000000405252 0.000000000006721],
    #           [-0.000048721052040,  -0.000003537584073,   0.000002453443334,  -0.000000474595671, 0.000000005546605,   0.000000007579548,  -0.000000000863558,   0.000000000037387 -0.000000000000576]]

    alpha21 = [[-28.887822405420000,   0.969404230456200,   0.046131290457220,  -0.022167572167190, 0.005067711671376,  -0.000621203298662,   0.000041724459684,  -0.000001439572350, 0.000000019784867],
               [9.909537514500000 , -0.041635378785990 ,  0.024440110133420 , -0.005092551836572, 0.000408064501583 , -0.000005739581032 , -0.000000644111268 ,  0.000000017665250 ,0.000000000045003],
              [-4.942743781185000 ,  0.012305453130630 , -0.012891743777630 ,  0.004174980751883, -0.000555975447556,   0.000022076168327,   0.000001604359947,  -0.000000166854982, 0.000000003956288],
               [1.715668267417000 ,  0.030341493117550 , -0.018378120304030 ,  0.003719122644080, -0.000203997452114,  -0.000021706340466,   0.000003319046346,  -0.000000153056234, 0.000000002467745],
              [-0.450800415519000 , -0.011364494352410 ,  0.007857406065923 , -0.001818309410916, 0.000134819628476 ,  0.000007621772971 , -0.000001742105664 ,  0.000000095390256 ,-0.000000001764750],
              [0.090425160005630 , -0.002874540451423 ,  0.001787805444265 , -0.000404916351008, 0.000038397010846 , -0.000001182790529 , -0.000000032242303 ,  0.000000002293258 ,-0.000000000026260],
              [-0.012809739332820 ,  0.001947546784046 , -0.001325209820376 ,  0.000320074963723, -0.000030758543015,   0.000000448503120,   0.000000118782095,  -0.000000007725205, 0.000000000145573],
               [0.001084341450206 , -0.000317534994558 ,  0.000222732360048 , -0.000055595739283, 0.000005656373947 , -0.000000123611505 , -0.000000018296793 ,  0.000000001312011 ,-0.000000000025768],
              [-0.000039743591344 ,  0.000016881993391 , -0.000012094729465 ,  0.000003100021286, -0.000000332356017,   0.000000009896407,   0.000000000800322,  -0.000000000065788, 0.000000000001344]]
 
    alpha01 = [[9.999989080920E-01, 6.569869814870E-04, -6.526259178085E-04,  2.446820545529E-04, -4.633538453818E-05, 4.889372584120E-06,  -2.917482144379E-07, 9.209996969945E-09, -1.195587997940E-10],
                [-6.684079057216E-06, -1.624733380895E-03, 1.517116722391E-03, -5.196975095555E-04, 8.835186629866E-05, -8.286820244724E-06,  4.378814547750E-07, -1.223407550017E-08, 1.405657502664E-10],
                [2.553992642225E-05, 9.833706477844E-04, -8.771533719662E-04 ,  2.694565448733E-04, -3.889200026191E-05, 2.928290705068E-06,  -1.169351655337E-07, 2.258524229896E-09, -1.460715455401E-11],
                [-2.462557791473E-05, -2.342847322381E-04, 2.116654525863E-04,  -5.533211626824E-05, 5.123221852559E-06, -1.729804749149E-08, -2.426972326758E-08, 1.404805094637E-09, -2.540724522759E-11],
                [1.062360801108E-05, 2.225391064535E-05, -2.995563308037E-05,  8.273895035263E-06, -6.797808694765E-07, -1.060219799928E-08, 3.476416204584E-09, -1.330157773056E-10, 1.424915474012E-12],
                [-2.399855499712E-06, 2.478808045973E-06, 1.242643822457E-06,  -5.874504858843E-07, 4.859497595281E-08, 1.114394044002E-09, -8.129340876771E-11, -1.183776577049E-11, 5.125710307402E-13],
                [2.951154702233E-07, -7.469982004941E-07, 1.518536644908E-07,  7.883226202848E-09, -1.005021139591E-09, -2.177196303683E-10,  5.313468965034E-12, 1.675867714679E-12, -6.770309443179E-14],
                [-1.871893412626E-08, 5.751651874704E-08, -1.380451507029E-08, -9.799681363679E-10, 4.054138156358E-10, -2.970144566810E-11,  1.619425683239E-12, -1.268121213878E-13, 3.934356277466E-15],
                [4.796659338151E-10, -1.452959768161E-09, 2.101916949778E-10 ,1.213701692902E-10, -3.377976381012E-11, 3.362497319640E-12, -1.798937732279E-13, 6.521970562366E-15, -1.251030581090E-16]]
    
    return np.array(alpha21), np.array(alpha01)
